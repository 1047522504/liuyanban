<?php

namespace common\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\Reply;

/**
 * ReplySearch represents the model behind the search form about `common\models\Reply`.
 */
class ReplySearch extends Reply
{

    public function attributes()
    {
        return array_merge(parent::attributes(),['title']); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'p_id', 'created_at', 'updated_at'], 'integer'],
            [['comment', 'user_id','title'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Reply::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination'=>['pageSize'=>5],
            'sort'=>[
                'defaultOrder'=>[
                    'id'=>SORT_DESC
                ],
                'attributes'=>['id']
            ]
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'p_id' => $this->p_id,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
        ]);

        $query->andFilterWhere(['like', 'comment', $this->comment])
            ->andFilterWhere(['like', 'user_id', $this->user_id]);
        $query->join('INNER JOIN','message','message.msg_id = reply.p_id');
        $query->andFilterWhere(['like','message.title',$this->title]);

        $dataProvider->sort->attributes['title']=[
            'asc'=>['message.title'=>SORT_ASC],
            'desc'=>['message.title'=>SORT_DESC],
        ];

        return $dataProvider;
    }
}
